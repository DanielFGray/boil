#!/usr/bin/env perl

use warnings;
use strict;

use Path::Tiny;
use List::Util("uniq");
use Config::Simple;
use Getopt::Declare;

my $specs = q{
	-n <name>	name of project to create
	-N		don't execute 'all' scripts
	-v		verbose
	[repeatable]
	{ $::verbose++; }
};
my $args = Getopt::Declare->new($specs);

my $configDir = ($ENV{XDG_CONFIG} // "$ENV{HOME}/.config") . "/boiler";

tie my %Config, "Config::Simple", "$configDir/conf";

sub dirs {
  my @paths = ("/all");
  for (@_) {
    $_ = "/" . $_ if substr($_, 0, 1) ne "/";
    push @paths, sprintf "%s/%s", $_,  (split '/')[-1];
    my $q = Path::Tiny->new($_);
    do {
      if (-d "$configDir/$q") {
        push @paths, "$q/all";
      } elsif (-f "$configDir/$q") {
        push @paths, "$q";
      } else {
        printf "%s is not a valid task\n", substr($_, 1);
        exit;
      }
      push @paths, $q;
    }
    while (($q = $q->parent) ne "/");
  }
  return sort { $a cmp $b } uniq(@paths);
}

sub boil {
  for (@_) {
    $_ = $configDir . $_;
    if (-f) {
      # printf "running %s\n", $_;
      if (-x) {
        system($_);
      } else {
        system($ENV{SHELL}, $_);
      }
    }
  }
}

if ($args->{'-n'}) {
  my $dir = sprintf '%s/%s', $Config{default_dir}, $args->{'-n'};
  system("mkdir -p $dir");
  chdir $dir || exit 4;
}

boil dirs @ARGV;
